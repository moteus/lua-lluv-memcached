io.stdout:setvbuf'no';io.stderr:setvbuf'no';
package.path = "..\\src\\lua\\?.lua;" .. package.path

local prequire = function(m)
  local ok, m = pcall(require, m)
  if ok then return m end
end

local uv        = require "lluv"
local loop      = require "lluv.busted.loop"
local Memcached = require "lluv.memcached"
local stp       = prequire"StackTracePlus"

setloop(loop)

loop.set_timeout(5)

loop.set_traceback(stp and stp.stacktrace or debug.traceback)

local function self_test(server, key)
  key = key or "test_key"

  Connection.new(server):open(function(self, err)
    assert(not err, tostring(err))

    self:on('error', function(self, _, err)
      assert(false, tostring(err))
    end)

    self:delete(key)

    uv.run("once")

    self:delete(key, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_FOUND", tostring(ret))
    end)

    uv.run("once")

    self:increment(key, 5, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_FOUND", tostring(ret))
    end)

    uv.run("once")

    self:get(key, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == nil, tostring(ret))
    end)

    uv.run("once")

    self:replace(key, "hello", function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_STORED", tostring(ret))
    end)

    uv.run("once")

    self:append(key, "hello", function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_STORED", tostring(ret))
    end)

    uv.run("once")

    self:prepend(key, "hello", function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_STORED", tostring(ret))
    end)

    uv.run("once")

    self:set(key, "72", 0, 12, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "STORED", tostring(ret))
    end)

    uv.run("once")

    self:get(key, function(self, err, ret, flags, cas)
      assert(not err, tostring(err))
      assert(ret   == "72", tostring(ret))
      assert(flags == 12,   tostring(flags))
      assert(cas   == nil,  tostring(cas))
    end)

    uv.run("once")

    self:gets(key, function(self, err, ret, flags, cas)
      assert(not err, tostring(err))
      assert(ret   == "72", tostring(ret))
      assert(flags == 12,   tostring(flags))
      assert(type(cas) == "string",  type(cas) .. " - " .. tostring(cas))
    end)

    uv.run("once")

    self:add(key, "hello", function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "NOT_STORED", tostring(ret))
    end)

    uv.run("once")

    self:increment(key, 5, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "77", tostring(ret))
    end)

    uv.run("once")

    self:decrement(key, 2, function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "75", tostring(ret))
    end)

    uv.run("once")

    self:prepend(key, "1", function(self, err, ret)
      assert(not err, tostring(err))
      assert(ret == "STORED", tostring(ret))
    end)

    uv.run("once")

    self:gets(key, function(self, err, ret, flags, cas)
      assert(not err, tostring(err))
      assert(ret   == "175", tostring(ret))
      assert(flags == 12,   tostring(flags))
      assert(type(cas) == "string",  type(cas) .. " - " .. tostring(cas))

      self:cas(key, "178", cas, function(self, err, ret)
        assert(not err, tostring(err))
        assert(ret == "STORED", tostring(ret))
      end)


      self:cas(key, "177", cas, function(self, err, ret)
        assert(not err, tostring(err))
        assert(ret == "EXISTS", tostring(ret))
      end)

      self:get(key, function()
        print("Done!")
        self:close()
      end)
    end)
  end)

  uv.run(debug.traceback)
end

describe('lluv.Memcached unexisted key tests', function()
  local cnn
  local key = 'test_key'

  it('should delete unexisted key', function(done) async()
    cnn:delete(key, function(self, err, ret) assert_nil(err)
      assert.equal("NOT_FOUND", ret)
      done()
    end)
  end)

  it('should increment unexisted key', function(done) async()
    cnn:increment(key, 5, function(self, err, ret) assert_nil(err)
      assert.equal("NOT_FOUND", ret)
      done()
    end)
  end)

  it('should get unexisted key', function(done) async()
    cnn:get(key, function(self, err, ret) assert_nil(err)
      assert_nil(ret)
      done()
    end)
  end)

  it('should replace unexisted key', function(done) async()
    cnn:replace(key, "hello", function(self, err, ret) assert_nil(err)
      assert.equal("NOT_STORED", ret)
      done()
    end)
  end)

  it('should append unexisted key', function(done) async()
    cnn:append(key, "hello", function(self, err, ret) assert_nil(err)
      assert.equal("NOT_STORED", ret)
      done()
    end)
  end)

  it('should prepend unexisted key', function(done) async()
    cnn:prepend(key, "hello", function(self, err, ret) assert_nil(err)
      assert.equal("NOT_STORED", ret)
      done()
    end)
  end)

  it('should store key', function(done) async()
    cnn:set(key, "72", function(self, err, ret) assert_nil(err)
      assert.equal("STORED", ret)
      done()
    end)
  end)

  before_each(function(done) async()
    cnn = Memcached.Connection.new()
    cnn:open(function(self, err) assert_nil(err)
      self:delete(key, function(self, err) assert_nil(err)
        done()
      end)
    end)
  end)

  after_each(function(done) async()
    if cnn then
      cnn:close(function() done() end)
      cnn=nil
      return
    end
    done()
  end)
end)

describe('lluv.Memcached numeric key tests', function()
  local cnn
  local key = 'test_key'

  it('should get key', function(done) async()
    cnn:get(key, function(self, err, ret, flags, cas) assert_nil(err)
      assert.equal("72", ret)
      assert.equal(12, flags)
      assert_nil(cas)
      done()
    end)
  end)

  it('should gets key', function(done) async()
    cnn:gets(key, function(self, err, ret, flags, cas) assert_nil(err)
      assert.equal("72", ret)
      assert.equal(12, flags)
      assert.string(cas)
      done()
    end)
  end)

  it('should fail add non integer value', function(done) async()
    cnn:add(key, "hello", function(self, err, ret) assert_nil(err)
      assert.equal("NOT_STORED", ret)
      done()
    end)
  end)

  it('should increment key', function(done) async()
    cnn:increment(key, 5, function(self, err, ret) assert_nil(err)
      assert.equal("77", ret)
      done()
    end)
  end)

  it('should decrement key', function(done) async()
    cnn:decrement(key, 2, function(self, err, ret) assert_nil(err)
      assert.equal("70", ret)
      done()
    end)
  end)

  it('should prepend key', function(done) async()
    cnn:prepend(key, 'hello - ', function(self, err, ret) assert_nil(err)
      assert.equal("STORED", ret)
      cnn:get(key, function(self, err, ret) assert_nil(err)
        assert.equal("hello - 72", ret)
        done()
      end)
    end)
  end)

  it('should handle cas', function(done) async()
    cnn:gets(key, function(self, err, ret, flags, cas) assert_nil(err)
      assert.equal("72", ret)
      assert.equal(12, flags)
      assert.string(cas)

      local called = false
      self:cas(key, "178", cas, function(self, err, ret) assert_nil(err)
        called = true
        assert.equal("STORED", ret)
      end)

      self:cas(key, "177", cas, function(self, err, ret) assert_nil(err)
        assert.equal("EXISTS", ret)
        assert.truthy(called)
        done()
      end)
    end)
  end)

  before_each(function(done) async()
    cnn = Memcached.Connection.new()
    cnn:open(function(self, err) assert_nil(err)
      self:set(key, "72", 0, 12, function(self, err) assert_nil(err)
        done()
      end)
    end)
  end)

  after_each(function(done) async()
    if cnn then
      cnn:close(function() done() end)
      cnn=nil
      return
    end
    done()
  end)
end)

describe('lluv.Memcached auto reconnect test', function()
  local cnn

  local ECONNRESET = uv.error('LIBUV', uv.ECONNRESET)

  it('should not connect by self', function(done) async()
    uv.timer():start(1500, function()
      assert.falsy(cnn:connected())
      done()
    end)
  end)

  it('should reconnect', function(done) async()
    cnn:open(function(self, err) assert_nil(err)
      -- take a time to call all events
      uv.timer():start(100, function()
        cnn:on('close', function(_, _, err)
          assert.equal(ECONNRESET, err)
        end)

        cnn:on('ready', function()
          done()
        end)

        uv.defer(function() -- simulate disconnect
          self:_close(ECONNRESET)
        end)
      end)
    end)
  end)

  before_each(function(done) async()
    cnn = Memcached.Connection.new{reconnect = 1}
    done()
  end)

  after_each(function(done) async()
    if cnn then
      cnn:removeAllListeners()
      cnn:close(function() done() end)
      cnn=nil
      return
    end
    done()
  end)
end)

describe('lluv.Memcached queue overflow', function()
  local cnn
  local key = 'test_key'
  local N = 10

  it('should detect overflow with basic command', function(done) async()
    local called, n = false, N + 1

    local function finish()
      assert.is_true(called)
      done()
    end
  
    cnn:on('overflow', function()
      called = true
    end)

    for i = 1, n do
      cnn:increment(key, 1, function(self, err, res)
        if i > N then
          assert.not_nil(err)
          assert.is_function(err.cat)
          assert.equal('MEMCACHED', err:cat())
          assert.equal('EQUEUE', err:name())
        else
          assert_nil(err)
          assert.equal(tostring(i), res)
        end
  
        n = n - 1
        if n == 0 then uv.defer(finish) end
      end)
    end
  end)

  before_each(function(done) async()
    cnn = Memcached.Connection.new{max_queue_size = N}
    cnn:open(function(self, err) assert_nil(err)
      self:set(key, "0", function(self, err) assert_nil(err)
        done()
      end)
    end)
  end)

  after_each(function(done) async()
    if cnn then
      cnn:close(function() done() end)
      cnn=nil
      return
    end
    done()
  end)
end)

assert_nil = assert.is_nil

assert:add_formatter(function(t)
  if type(t) ~= 'table' then return end

  if t.no and t.msg and t.cat then
    return tostring(t)
  end
end)
